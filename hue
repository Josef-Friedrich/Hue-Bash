#! /bin/bash

if [ -f /etc/hue.ini ]; then
  source /etc/hue.ini
else
  echo "Create hue.ini file."
fi

##
#
##
function help {
  echo "Commands are:
  - hue help
  - hue set all
  - hue set 1-?
  - hue get all
  - hue conf"
}

##
#
##
function call {
  if [ -n "$3" ]; then
    DATA="--data {$3}"
  fi

  curl --silent --request $1 $DATA http://$IP/api/$USERNAME/$2 | jq '.'
}

##
#
##
function options {
  VALUES=()

  while getopts ":o:b:h:s:x:c:a:e:t:g:G:" OPT; do
    case $OPT in
      # on
      o)
        VALUES+=("\"on\":$OPTARG")
        ;;
      # bri
      b)
        VALUES+=("\"bri\":$OPTARG")
        ;;
      # hue
      h)
        VALUES+=("\"hue\":$OPTARG")
        ;;
      # sat
      s)
        VALUES+=("\"sat\":$OPTARG")
        ;;
      # xy
      x)
        VALUES+=("\"xy\":$OPTARG")
        ;;
      # ct
      c)
        VALUES+=("\"ct\":$OPTARG")
        ;;
      # alert
      a)
        VALUES+=("\"alert\":\"$OPTARG\"")
        ;;
      # effect
      e)
        VALUES+=("\"effect\":\"$OPTARG\"")
        ;;
      # transitiontime
      t)
        VALUES+=("\"transitiontime\":$OPTARG")
        ;;

      \?)
        echo "Invalid option: -$OPTARG" >&2
        exit 1
        ;;
      :)
        echo "Option -$OPTARG requires an argument." >&2
        exit 1
        ;;
    esac
  done

  STATE=$(printf ",%s" "${VALUES[@]}")
  STATE=${STATE:1}

  echo $STATE

  #echo $STATE | jq '.'

  exit 0
}

##
#
##
function colors {
  case "$1" in
    rot          ) echo "-h 0 -s 255";;
    gelb         ) echo "-h 12750 -s 255";;
    dunkel_gruen ) echo "-h 25500 -s 255";;
    gruen        ) echo "-h 36210 -s 255";;
    blau         ) echo "-h 46920 -s 255";;
    lila         ) echo "-h 56100 -s 255";;
    *            ) echo "Unbekannter Farben-Parameter";;
  esac

  exit 0
}

##
#
##
function colors_json {
  case "$1" in
    red)        OUTPUT='"hue":0,     "sat":255';;
    yellow)     OUTPUT='"hue":12750, "sat":255';;
    dark_green) OUTPUT='"hue":25500, "sat":255';;
    green)      OUTPUT='"hue":36210, "sat":255';;
    blue)       OUTPUT='"hue":46920, "sat":255';;
    purple)     OUTPUT='"hue":56100, "sat":255';;
    *)          OUTPUT="Unbekannter Farben-Parameter";;
  esac

  echo $OUTPUT | tr -d [:space:]

  exit 0
}

##
#
##
function get_lamp {
  if [ "$1" -eq "$1" ] 2> /dev/null; then
    echo $1
  else
    case "$1" in
      wohnzimmer_haengelampe_1  | wohn_haenge_1 | wh1 ) echo 2;;
      wohnzimmer_haengelampe_2  | wohn_haenge_2 | wh2 ) echo 1;;
      wohnzimmer_haengelampe_3  | wohn_haenge_3 | wh3 ) echo 3;;
      wohnzimmer_ecke_einzeln   | wohn_eck_einz | wee ) echo 9;;
      wohnzimmer_schrank_links  | wschrank_li   | wsl ) echo 7;;
      wohnzimmer_schrank_rechts | wschrank_re   | wsr ) echo 8;;
      schlafzimmer_rechts_unten | schlaf_re_un  | sru ) echo 4;;
      schlafzimmer_links_oben   | schlaf_li_ob  | slo ) echo 5;;
      schlafzimmer_links_unten  | schlaf_li_un  | slu ) echo 6;;
    esac
  fi

  exit 0
}

##
#
##
function stop {
  PIDS_FILE="/var/run/hue.pids"

  for PID in $(cat $PIDS_FILE); do
    kill $PID > /dev/null
  done

  > $PIDS_FILE
}

##
#
##
function debug {
  echo "IP: $IP"
  echo "USERNAME: $USERNAME"
}

##
#
##
function set_light_single {
  LAMP=$(get_lamp $1)
  DATA=$(colors_json $2)
  if [ -n "$3" ]; then
    let "TRANS_TIME = 10 * $3"
    DATA=$DATA',"transitiontime":'$TRANS_TIME
  fi

  call PUT lights/$LAMP/state $DATA

  if [ -n "$3" ]; then
    sleep $3
  fi
}

##
#
##

case "$1" in
  help) help;;

  set)
    case "$2" in
      all)
        shift 2
        call PUT groups/0/action $(colors_json $*)
      ;;

      *)
        set_light_single $2 $3 $4
    esac
    ;;

  get)
    case "$2" in
      all)
        call GET lights
        ;;
      *)
        call GET lights/$(get_lamp $2)
        ;;

    esac
    ;;

  stop)
    stop
    ;;

  debug)
    debug
  ;;

  *)
    help
    ;;

esac
