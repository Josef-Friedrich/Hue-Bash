#! /bin/bash

CONFIG_FILE="/etc/hue/hue.ini"

if [ -f $CONFIG_FILE ]; then
  source $CONFIG_FILE
else
  echo "hue.ini file was not found. Create hue.ini file in /etc/hue.ini."
fi

while getopts ":djt" OPT; do

  case $OPT in
    d)
      DEBUG=1
      echo "debug mode" >&2
      ;;

    j)
      JQDEBUG=1
      echo "debug mode with jq" >&2
      ;;

    t)
      TEXTDEBUG=1
      echo "debug mode with text" >&2
      ;;

    \?)
      echo "Invalid option: -$OPTARG" >&2
      exit 1
      ;;

    :)
      echo "Option -$OPTARG requires an argument." >&2
      exit 1
      ;;

  esac
done

shift $((OPTIND-1))

##
#
##
function help {
  echo "Commands are:
  - hue help
  - hue set all
  - hue set 1-?
  - hue get all
  - hue conf"
}

##
#
##
function call {
  if [ -n "$3" ]; then
    DATA="--data $3"
  fi

  curl --silent --request $1 $DATA http://$IP/api/$USERNAME/$2 | output
}

##
#
##
function stop {
  PIDS_FILE="/var/run/hue.pids"

  for PID in $(cat $PIDS_FILE); do
    kill $PID > /dev/null
  done

  > $PIDS_FILE
}

##
#
##
function debug {
  echo "IP: $IP"
  echo "USERNAME: $USERNAME"
}

##
#
##


function set_process {

  while true ; do
    case "$1" in

      o|on)
        VALUES+=("\"on\":true")
        shift 1
        ;;

      of|off)
        VALUES+=("\"on\":false")
        shift 1
        ;;

      b|bri)
        VALUES+=("\"bri\":$2")
        shift 2
        ;;

      h|hue)
        VALUES+=("\"hue\":$2")
        shift 2
        ;;

      s|sat)
        VALUES+=("\"sat\":$2")
        shift 2
        ;;

      x)
        X=$2
        shift 2
        ;;

      y)
        Y=$2
        shift 2
        ;;

      c|ct)
        VALUES+=("\"ct\":$2")
        shift 2
        ;;

      a|alert)
        VALUES+=("\"alert\":\"$2\"")
        shift 2
        ;;

      e|effect)
        VALUES+=("\"effect\":\"$2\"")
        shift 2
        ;;

      t|transitiontime)
        VALUES+=("\"transitiontime\":$2")
        shift 2
        ;;

      *)
        break
        ;;
    esac
  done


  if [ $X ] && [ $Y ]; then
    VALUES+=("\"xy\":[$X,$Y]")
  fi


  STATE=$(printf ",%s" "${VALUES[@]}")
  STATE=${STATE:1}

  echo "{$STATE}"
}

function set {
  LIGHTS="$1"
  shift

  JSON=$(set_process "$@")

  if [ "$LIGHTS" == "all" ]; then

    call PUT groups/0/action $JSON

  else

    LIGHTS=$(echo "$LIGHTS" | tr "," "\n")

    for LIGHT in $LIGHTS; do
      call PUT lights/$LIGHT/state "$JSON"
    done

  fi
}

function get {
  LIGHTS="$1"
  shift

  if [ "$LIGHTS" == "all" ]; then

    call GET lights

  else

    LIGHTS=$(echo "$LIGHTS" | tr "," "\n")

    for LIGHT in $LIGHTS; do
      call GET lights/$LIGHT "$JSON"
    done

  fi
}

function alert {
  LIGHTS="$1"
  shift

  if [ "$LIGHTS" == "all" ]; then

    call PUT groups/0/action '{"alert":"select"}'

  else

    LIGHTS=$(echo "$LIGHTS" | tr "," "\n")

    for LIGHT in $LIGHTS; do
      call PUT lights/$LIGHT/state '{"alert":"select"}'
    done

  fi
}

function output {
  read OUTPUT

  if [ $DEBUG ]; then
    echo $OUTPUT
  fi

  if [ $JQDEBUG ]; then
    echo $OUTPUT | jq '.'
  fi

  if [ $TEXTDEBUG ]; then

    # Hue and Saturation
    HUE=$(echo $OUTPUT | jq '.state.hue')
    SATURATION=$(echo $OUTPUT | jq '.state.sat')

    # XY
    X=$(echo $OUTPUT | jq '.state.xy[0]')
    Y=$(echo $OUTPUT | jq '.state.xy[1]')

    # COLORTEMPERATURE
    COLORTEMPERATURE=$(echo $OUTPUT | jq '.state.ct')

    BRIGHTNESS=$(echo $OUTPUT | jq '.state.bri')

    echo "$HUE;$SATURATION;$X;$Y;$COLORTEMPERATURE"
  fi
}

case "$1" in
  help)
    help
  ;;

  set)
    shift
    set $@
  ;;

  get)
    shift
    get $@
  ;;

  alert)
    shift
    alert $@
  ;;

  stop)
    stop
  ;;

  debug)
    debug
  ;;

  *)
    help
  ;;

esac
